import { describe, it, expect, vi, beforeEach } from 'vitest';

// Mock API service
vi.mock('../../services/api', () => {
  // Mock logic for auto-generating description
  const createGoalMock = vi.fn((goalData) => {
    // Implement the same description generation logic as the real api.js
    const data = { ...goalData };
    if (!data.description && data.title && data.motivation) {
      data.description = `I want to ${data.title}, because ${data.motivation}.`;
    }
    
    return Promise.resolve({
      data: {
        success: true,
        data: {
          _id: 'mock-goal-id',
          ...data
        }
      }
    });
  });
  
  return {
    default: {
      goals: {
        createGoal: createGoalMock
      }
    }
  };
});

import apiService from '../../services/api';

describe('Goal creation data flow test', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('Description field should be correctly passed to API', async () => {
    // Mock data generated by GoalSettingGuide
    const goalData = {
      title: 'Complete project',
      motivation: 'improve my skills',
      targetDate: new Date('2023-12-31'),
      resources: ['time management'],
      dailyTasks: ['write code'],
      rewards: ['rest time'],
      visionImageUrl: 'http://example.com/image.jpg',
      userId: 'user123',
      // Does not include description field
    };

    // Call API layer
    await apiService.goals.createGoal(goalData);

    // Verify API call
    expect(apiService.goals.createGoal).toHaveBeenCalledTimes(1);
    
    // Verify that data passed to API includes auto-generated description
    const calledWithData = apiService.goals.createGoal.mock.calls[0][0];
    expect(calledWithData).toHaveProperty('description');
    expect(calledWithData.description).toBe('I want to Complete project, because improve my skills.');
  });

  it('If description field is provided, it should remain unchanged', async () => {
    // Mock data with description
    const goalData = {
      title: 'Complete project',
      motivation: 'improve my skills',
      description: 'This is a custom description',
      userId: 'user123',
    };

    // Call API layer
    await apiService.goals.createGoal(goalData);

    // Verify API call
    expect(apiService.goals.createGoal).toHaveBeenCalledTimes(1);
    
    // Verify description field remains unchanged
    const calledWithData = apiService.goals.createGoal.mock.calls[0][0];
    expect(calledWithData.description).toBe('This is a custom description');
  });
}); 